%This program will find the onset of phase 2, by using the differences in
%amplitudes across a moving window. 


%Reset parameters
    
window = 1:200;
    mpd = 25;
    mpp = .10;
    add = 10;



for k = numcol
    window = 1:200;
    mpd = 25;
    mpp = .10;
    add = 10;
    for i = 1:ep2 ;
        
        [pks,inds] = findpeaks(data(window,k),  'MinPeakProminence', mpp, 'minpeakdistance', mpd);  
        dR_inds(i,1:numel(inds)) = inds;
        dR_pks(i, 1:numel(pks)) = pks;
  

        time = timeset(dR_inds(i,1:sum(~isnan(dR_inds(i,:)))) + (window(1) - 1 ) );
        total_time(i, 1:numel(time)) = time;

        window = window + offset;
        mpd = 10+ log(add);
        add = add + 10; 
        mpp = mpp + .005;
        
        eval(sprintf ('T%d = [total_time]', k));
        eval(sprintf ('P%d = [dR_pks]',k));
        var = eval(sprintf( 'P%d', k));
        
        var(var == 0) = NaN; 
    
    end
    clear dR_pks;
    clear dR_inds;
    clear time;
    clear total_time;
    
 

end
 %This loop gets the size of each peak matrix.
for k = numcol
    var = eval(sprintf( 'P%d', k));
    sz = size(var);
    dR_sz(k,1:numel(sz)) = sz;
   
end



%Adds an extra column of zeros that are then turned into NaN's
for k = numcol
    var = eval(sprintf( 'P%d', k));
    var(:, dR_sz(k,2) + 1) = 0;
    var(var == 0) = NaN;
    eval(sprintf('P%d = [var]', k));
     
end



%Concatenate the 2nd row 1st index to the 1st row last index, which is why
%there is a place holder column created above.
for k = numcol
    for i = 2:dR_sz(k,1);
        var = eval(sprintf( 'P%d', k));
        test = var(i,1);
        var(i-1,dR_sz(k,2)+1) = test;
        eval(sprintf('P%d = [var]',k));
    end
end


%Take the diff of each element in the P1 matrix and save it out to a
%variable, "D1 D2 D3..." 
for k = numcol
    var = eval(sprintf( 'P%d',k));
    for n = 1:dR_sz(k,1);
        
        
        delta = diff(var(n,:));
        dR_delta1(n,1:numel(delta)) = delta;
      
    end
    eval(sprintf ('D%d = [dR_delta1]', k));
    clear dR_delta1;
end
%This removes that extra column you added as a place holder.
for k = numcol
   delete = eval(sprintf('P%d',k));
   delete(:,dR_sz(k,2)+1) = [];
   eval(sprintf('P%d = [delete]',k)); 
end



 


%make all floats to ints, so we can index correctly. We do this by
%dividing all the number by 1e-4
for k = numcol
   var = eval(sprintf('D%d',k));
   deltaVal = round((1/a)*var);
   eval(sprintf('D%d = [deltaVal]',k));
end


%find amplitudes that are greater than b, the threshold. Save to a variable
%called col. This for loop saves the column index, and the index at which
%the numbers are in, in col are the row index
clear var;
for k = numcol
    for i = 1:ep2
        
         var = (eval(sprintf('D%d',k)));
         [row,col] = find(var(i,:) > b );
         col_ind(i,1:numel(col)) = col;
    end
    eval(sprintf('C%d = [col_ind]', k));
    clear col_ind;
    
end
clear var;


%indices where there are values greater than the threshold, b.  
for k = numcol
    var = (eval(sprintf('C%d',k)));
    
    [testR,testC] = find(var > 0);

    eval(sprintf('row%d = [testR]', k));
    
end


%convert indices so we can get the correct Time index.
for k = numcol
    temp_row = (eval(sprintf('row%d', k)));
    temp_col = (eval(sprintf('C%d',k)));
    temp_time = (eval(sprintf ('T%d',k)));
    TF = isempty(temp_row);
    if TF == 1 
        single_phase = NaN;
        phase2(k,1:numel(single_phase)) = single_phase;
    else
        r = temp_row(1);
        
        c=temp_col(r,1);

        c1 = c + 1;
        single_phase = temp_time(r,c1);
        phase2(k,1:numel(single_phase)) = single_phase;
    end    
    
end


